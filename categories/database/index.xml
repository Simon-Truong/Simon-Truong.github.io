<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>database on Simon's Blog</title><link>https://simon-truong.github.io/categories/database/</link><description>Recent content in database on Simon's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-au</language><copyright>Simon Truong</copyright><lastBuildDate>Tue, 22 Jun 2021 18:40:33 +1000</lastBuildDate><atom:link href="https://simon-truong.github.io/categories/database/index.xml" rel="self" type="application/rss+xml"/><item><title>Eventual vs Strong Consistency</title><link>https://simon-truong.github.io/posts/eventual-vs-strong-consistency/</link><pubDate>Tue, 22 Jun 2021 18:40:33 +1000</pubDate><guid>https://simon-truong.github.io/posts/eventual-vs-strong-consistency/</guid><description>When working with distributed databases, it is important to understand the different concurrent models. Especially when updating data, do we expect all responses to reflect the updated state but incur a performance penalty? Or is performance more important and stale data is acceptable?
Strong Consistency Strong Consistency is the concurrency model focused on maintaining accuracy in a distributed database. Simply, when a request to update data is sent to one node, the node will forward the request to all remaining nodes and halts processing.</description></item></channel></rss>